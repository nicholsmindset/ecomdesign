// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String          @id @default(cuid())
  email             String          @unique
  name              String?
  password          String?
  emailVerified     DateTime?
  image             String?
  companyName       String?
  industry          String?

  // Credits & Billing
  tier              String          @default("free")
  monthlyCredits    Int             @default(5)
  creditsBalance    Int             @default(5)
  creditsUsedThisMonth Int          @default(0)
  rolloverCap       Int             @default(0)
  lastCreditReset   DateTime        @default(now())
  subscriptionId    String?         @unique
  subscription      Subscription?

  // Integrations
  googleDriveToken  String?
  googleDriveRefreshToken String?
  googleDriveFolderId String?

  // Preferences
  defaultModelType  String          @default("realistic")
  defaultSceneStyle String          @default("studio")

  // Brand Kit (Phase 3)
  brandKitEnabled   Boolean         @default(false)
  brandKitImages    Json?
  brandKitModelId   String?

  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt

  jobs              Job[]
  creditTransactions CreditTransaction[]
  apiKeys           ApiKey[]
  accounts          Account[]
  sessions          Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subscription {
  id                 String   @id @default(cuid())
  userId             String   @unique
  user               User     @relation(fields: [userId], references: [id])
  stripeCustomerId   String   @unique
  stripeSubscriptionId String @unique
  stripePriceId      String
  status             String
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Job {
  id                String          @id @default(cuid())
  userId            String
  user              User            @relation(fields: [userId], references: [id])
  originalImageUrl  String
  modelType         String
  sceneStyle        String
  quantity          Int             @default(1)
  status            String          @default("pending")
  n8nJobId          String?         @unique
  resultImages      Json?
  googleDriveUrls   Json?
  creditsReserved   Int
  creditsConsumed   Int?
  errorMessage      String?
  processingTimeMs  Int?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  bulkJobId         String?
  bulkJob           BulkJob?        @relation(fields: [bulkJobId], references: [id])
  backgroundPrompt  String
  inputImages       String[]
  imageCount        Int
  outputImages      String[]        @default([])
  progress          Int?            @default(0)
  currentStep       String?
  completedAt       DateTime?

  @@index([userId, status])
  @@index([createdAt])
}

model CreditTransaction {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  amount      Int
  type        String
  description String
  jobId       String?
  createdAt   DateTime @default(now())

  @@index([userId, createdAt])
}

model BulkJob {
  id              String   @id @default(cuid())
  userId          String
  fileName        String
  totalImages     Int
  processedImages Int      @default(0)
  status          String   @default("pending")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  jobs            Job[]
}

model ApiKey {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  key       String   @unique
  name      String
  lastUsed  DateTime?
  createdAt DateTime @default(now())

  @@index([userId])
}
